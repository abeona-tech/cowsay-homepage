{/* Inlined to avoid FOUC. */}
<script is:inline>
	const lightModePref = window.matchMedia("(prefers-color-scheme: light)");

	// function getUserPref() {
	// 	const storedTheme = typeof localStorage !== "undefined" && localStorage.getItem("theme");
	// 	return storedTheme || (lightModePref.matches ? "light" : "dark");
	// }

	function getUserPref() {
		// Check if the user has visited the site before
		const hasVisited = localStorage.getItem("hasVisited");

		// If the user has not visited the site before, set the theme to 'light'
		if (!hasVisited) {
			localStorage.setItem("hasVisited", "true");
			localStorage.setItem("theme", "light");
			return "light";
		}

		// If the user has visited the site before, return their saved theme preference
		const savedTheme = localStorage.getItem("theme");
		return savedTheme || "light";
	}

	function setTheme(newTheme) {
		if (newTheme !== "light" && newTheme !== "dark") {
			return console.warn(
				`Invalid theme value '${newTheme}' received. Expected 'light' or 'dark'.`
			);
		}

		const root = document.documentElement;

		// root already set to newTheme, exit early
		if (newTheme === root.getAttribute("data-theme")) {
			return;
		}

		root.setAttribute("data-theme", newTheme);

		const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");
		const bgColour = getComputedStyle(document.body).getPropertyValue("--theme-bg");
		colorThemeMetaTag.setAttribute("content", `hsl(${bgColour})`);
		if (typeof localStorage !== "undefined") {
			localStorage.setItem("theme", newTheme);
		}
	}

	// initial setup
	setTheme(getUserPref());

	// View Transitions hook to restore theme
	document.addEventListener("astro:after-swap", () => setTheme(getUserPref()));

	// listen for theme-change custom event, fired in src/components/ThemeToggle.astro
	document.addEventListener("theme-change", (e) => {
		setTheme(e.detail.theme);
	});

	// listen for prefers-color-scheme change.
	lightModePref.addEventListener("change", (e) => setTheme(e.matches ? "light" : "dark"));
</script>
